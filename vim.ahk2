; vi: foldmarker={{{,}}} foldmethod=marker

; {{{ dbg Windows

dbgWin := guiCreate(
  '+alwaysOnTop'
)

dbgWin.onEvent('close', (*) => exitApp())

dbgText := dbgWin.add('text', 'w20 section')

dbgWinEdit := dbgWin.add('text',
;  'r1 '   . ; Number of rows
   'w300 ys'   ; Width in pixels
;  'vEdt '   ; Name of control (introduced with v)
;  'readonly'
)

dbgAdd(txt) {
  global dbgWinEdit
  dbgWinEdit.text := dbgWinEdit.text  . txt
}

dbgSet(txt) {
  global dbgWinEdit
  dbgWinEdit.text := txt
}


; writeMousePositionIntoEdit() {
; 
;   coordMode('mouse', 'screen')
;   mouseGetPos mouseX, mouseY
; 
;   global dbgWinEdit
;   dbgWinEdit.text := dbgWinEdit.text  .  mouseX . ' / ' . mouseY . "`r`n"
; }

dbgWin.show('x0 ' . 'y0')

; }}}

activeProcess() { ; {{{

  return winGetProcessName('a')

} ; }}}

vim_ignore_hotkey() { ; {{{

  proc := activeProcess()

  if proc = 'ggg.exe' or proc = 'gvim.exe' or proc = 'vim.exe'
     return 1

  return 0
; dbgSet(proc)

} ; }}}

vim_insert_mode()
; vim_mode := 'insert'

esc:: ; {{{
^[::

  vim_normal_mode()

return ; }}}

$a:: ; {{{
  vim_normal_to_insert_mode('a', '{right}')

; send('{right}')
; vim_insert_mode()  

return ; }}}

$+a:: ; {{{

  vim_normal_to_insert_mode('A', '{end}')
; send('{end}')
; vim_insert_mode()  

return ; }}}

$b:: ; {{{
  vim_normal_command('b', '^{left}')
return ; }}}

$h:: ; {{{

  vim_normal_command('h', '{left}')

return ; }}}

$i:: ; {{{

  vim_normal_to_insert_mode('i', '')
; vim_insert_mode()  

return ; }}}

$+i:: ; {{{

  vim_normal_to_insert_mode('I', '{home}')
; send('{home}')
; vim_insert_mode()  

return ; }}}

$j:: ; {{{

  vim_normal_command('j', '{down}')

return ; }}}

$k:: ; {{{

  vim_normal_command('k', '{up}')

return ; }}}

$l:: ; {{{

  vim_normal_command('l', '{right}')

return ; }}}

$o:: ; {{{

  vim_normal_to_insert_mode('o', '{end}{enter}')

return ; }}}

$+o:: ; {{{
  vim_normal_to_insert_mode('O', '{up}{end}{enter}')

; send('{up}{end}{enter}')
; vim_insert_mode()  

return ; }}}

$w:: ; {{{
  vim_normal_command('w', '^{right}')
return ; }}}

$x:: ; {{{

  vim_normal_command('x', '{delete}')

return ; }}}

$+x:: ; {{{

  vim_normal_command('x', '{bs}')

return ; }}}

vim_normal_to_insert_mode(toggleKey, keysToSend) { ; {{{

  global vim_mode
  if vim_ignore_hotkey() {
     dbgSet('Not going from normal to insert mode because vim_ignore_hotkey.')
     send(toggleKey)
     return
  }

  if vim_mode != 'n' {
     send(toggleKey)
     return
  }

  send(keysToSend)

  vim_insert_mode()

} ; }}}

vim_normal_command(commandKey, keysToSend) { ; {{{

  global vim_mode

  if vim_ignore_hotkey() {
     dbgSet('Not going from normal to insert mode because vim_ignore_hotkey.')
     send(commandKey)
     return
  }

  dbgSet('vim_normal_command: ')

  if vim_mode != 'n' {
     dbgAdd('vim mode = ' . vim_mode)
     send(commandKey)
     return
  }

  dbgAdd(', sending ' . keysToSend)
  send(keysToSend)
  
} ; }}}

vim_normal_mode() { ; {{{

   if vim_ignore_hotkey() {
      dbgSet('Not entering normal mode because vim_ignore_hotkey.')
      return
   }

   vim_set_mode('n')

;  global vim_mode
;  vim_mode := 'normal'

;  dbgSet('Entered normal mode')
} ; }}}

vim_set_mode(mode) { ; {{{

   global vim_mode
   global dbgText
   vim_mode     := mode
   dbgText.text := mode
;  vim_mode := 'insert'

   dbgSet('Entered ' . mode . ' mode')

} ; }}}

vim_insert_mode() { ; {{{

   vim_set_mode('i')

;  dbgSet('Entered insert mode')
} ; }}}
